// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protoData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protoData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protoData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protoData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protoData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protoData_2eproto;
namespace protoData {
class Cart;
struct CartDefaultTypeInternal;
extern CartDefaultTypeInternal _Cart_default_instance_;
class CartItem;
struct CartItemDefaultTypeInternal;
extern CartItemDefaultTypeInternal _CartItem_default_instance_;
class Discount;
struct DiscountDefaultTypeInternal;
extern DiscountDefaultTypeInternal _Discount_default_instance_;
class DiscountArray;
struct DiscountArrayDefaultTypeInternal;
extern DiscountArrayDefaultTypeInternal _DiscountArray_default_instance_;
class Goods;
struct GoodsDefaultTypeInternal;
extern GoodsDefaultTypeInternal _Goods_default_instance_;
class GoodsArray;
struct GoodsArrayDefaultTypeInternal;
extern GoodsArrayDefaultTypeInternal _GoodsArray_default_instance_;
class Transaction;
struct TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransactionArray;
struct TransactionArrayDefaultTypeInternal;
extern TransactionArrayDefaultTypeInternal _TransactionArray_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserForm;
struct UserFormDefaultTypeInternal;
extern UserFormDefaultTypeInternal _UserForm_default_instance_;
}  // namespace protoData
PROTOBUF_NAMESPACE_OPEN
template<> ::protoData::Cart* Arena::CreateMaybeMessage<::protoData::Cart>(Arena*);
template<> ::protoData::CartItem* Arena::CreateMaybeMessage<::protoData::CartItem>(Arena*);
template<> ::protoData::Discount* Arena::CreateMaybeMessage<::protoData::Discount>(Arena*);
template<> ::protoData::DiscountArray* Arena::CreateMaybeMessage<::protoData::DiscountArray>(Arena*);
template<> ::protoData::Goods* Arena::CreateMaybeMessage<::protoData::Goods>(Arena*);
template<> ::protoData::GoodsArray* Arena::CreateMaybeMessage<::protoData::GoodsArray>(Arena*);
template<> ::protoData::Transaction* Arena::CreateMaybeMessage<::protoData::Transaction>(Arena*);
template<> ::protoData::TransactionArray* Arena::CreateMaybeMessage<::protoData::TransactionArray>(Arena*);
template<> ::protoData::User* Arena::CreateMaybeMessage<::protoData::User>(Arena*);
template<> ::protoData::UserForm* Arena::CreateMaybeMessage<::protoData::UserForm>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protoData {

// ===================================================================

class GoodsArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoData.GoodsArray) */ {
 public:
  inline GoodsArray() : GoodsArray(nullptr) {}
  ~GoodsArray() override;
  explicit constexpr GoodsArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GoodsArray(const GoodsArray& from);
  GoodsArray(GoodsArray&& from) noexcept
    : GoodsArray() {
    *this = ::std::move(from);
  }

  inline GoodsArray& operator=(const GoodsArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoodsArray& operator=(GoodsArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GoodsArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const GoodsArray* internal_default_instance() {
    return reinterpret_cast<const GoodsArray*>(
               &_GoodsArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GoodsArray& a, GoodsArray& b) {
    a.Swap(&b);
  }
  inline void Swap(GoodsArray* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoodsArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GoodsArray* New() const final {
    return new GoodsArray();
  }

  GoodsArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GoodsArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GoodsArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GoodsArray& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoodsArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoData.GoodsArray";
  }
  protected:
  explicit GoodsArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsFieldNumber = 1,
  };
  // repeated .protoData.Goods goods = 1;
  int goods_size() const;
  private:
  int _internal_goods_size() const;
  public:
  void clear_goods();
  ::protoData::Goods* mutable_goods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoData::Goods >*
      mutable_goods();
  private:
  const ::protoData::Goods& _internal_goods(int index) const;
  ::protoData::Goods* _internal_add_goods();
  public:
  const ::protoData::Goods& goods(int index) const;
  ::protoData::Goods* add_goods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoData::Goods >&
      goods() const;

  // @@protoc_insertion_point(class_scope:protoData.GoodsArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoData::Goods > goods_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoData_2eproto;
};
// -------------------------------------------------------------------

class Goods final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoData.Goods) */ {
 public:
  inline Goods() : Goods(nullptr) {}
  ~Goods() override;
  explicit constexpr Goods(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Goods(const Goods& from);
  Goods(Goods&& from) noexcept
    : Goods() {
    *this = ::std::move(from);
  }

  inline Goods& operator=(const Goods& from) {
    CopyFrom(from);
    return *this;
  }
  inline Goods& operator=(Goods&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Goods& default_instance() {
    return *internal_default_instance();
  }
  static inline const Goods* internal_default_instance() {
    return reinterpret_cast<const Goods*>(
               &_Goods_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Goods& a, Goods& b) {
    a.Swap(&b);
  }
  inline void Swap(Goods* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Goods* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Goods* New() const final {
    return new Goods();
  }

  Goods* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Goods>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Goods& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Goods& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Goods* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoData.Goods";
  }
  protected:
  explicit Goods(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kPriceFieldNumber = 3,
    kSellerFieldNumber = 4,
    kIdFieldNumber = 5,
    kTypeFieldNumber = 6,
    kRemainFieldNumber = 7,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // double price = 3;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // int32 seller = 4;
  void clear_seller();
  ::PROTOBUF_NAMESPACE_ID::int32 seller() const;
  void set_seller(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seller() const;
  void _internal_set_seller(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 5;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 6;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 remain = 7;
  void clear_remain();
  ::PROTOBUF_NAMESPACE_ID::int32 remain() const;
  void set_remain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remain() const;
  void _internal_set_remain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protoData.Goods)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  double price_;
  ::PROTOBUF_NAMESPACE_ID::int32 seller_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 remain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoData_2eproto;
};
// -------------------------------------------------------------------

class User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoData.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  explicit constexpr User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return new User();
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const User& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoData.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 5,
    kBalanceFieldNumber = 4,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_MUST_USE_RESULT std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 5;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double balance = 4;
  void clear_balance();
  double balance() const;
  void set_balance(double value);
  private:
  double _internal_balance() const;
  void _internal_set_balance(double value);
  public:

  // @@protoc_insertion_point(class_scope:protoData.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  double balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoData_2eproto;
};
// -------------------------------------------------------------------

class UserForm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoData.UserForm) */ {
 public:
  inline UserForm() : UserForm(nullptr) {}
  ~UserForm() override;
  explicit constexpr UserForm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserForm(const UserForm& from);
  UserForm(UserForm&& from) noexcept
    : UserForm() {
    *this = ::std::move(from);
  }

  inline UserForm& operator=(const UserForm& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserForm& operator=(UserForm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserForm& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserForm* internal_default_instance() {
    return reinterpret_cast<const UserForm*>(
               &_UserForm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserForm& a, UserForm& b) {
    a.Swap(&b);
  }
  inline void Swap(UserForm* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserForm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserForm* New() const final {
    return new UserForm();
  }

  UserForm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserForm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserForm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserForm& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserForm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoData.UserForm";
  }
  protected:
  explicit UserForm(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_MUST_USE_RESULT std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protoData.UserForm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoData_2eproto;
};
// -------------------------------------------------------------------

class TransactionArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoData.TransactionArray) */ {
 public:
  inline TransactionArray() : TransactionArray(nullptr) {}
  ~TransactionArray() override;
  explicit constexpr TransactionArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionArray(const TransactionArray& from);
  TransactionArray(TransactionArray&& from) noexcept
    : TransactionArray() {
    *this = ::std::move(from);
  }

  inline TransactionArray& operator=(const TransactionArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionArray& operator=(TransactionArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionArray* internal_default_instance() {
    return reinterpret_cast<const TransactionArray*>(
               &_TransactionArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransactionArray& a, TransactionArray& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionArray* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionArray* New() const final {
    return new TransactionArray();
  }

  TransactionArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionArray& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoData.TransactionArray";
  }
  protected:
  explicit TransactionArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
  };
  // repeated .protoData.Transaction transaction = 1;
  int transaction_size() const;
  private:
  int _internal_transaction_size() const;
  public:
  void clear_transaction();
  ::protoData::Transaction* mutable_transaction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoData::Transaction >*
      mutable_transaction();
  private:
  const ::protoData::Transaction& _internal_transaction(int index) const;
  ::protoData::Transaction* _internal_add_transaction();
  public:
  const ::protoData::Transaction& transaction(int index) const;
  ::protoData::Transaction* add_transaction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoData::Transaction >&
      transaction() const;

  // @@protoc_insertion_point(class_scope:protoData.TransactionArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoData::Transaction > transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoData_2eproto;
};
// -------------------------------------------------------------------

class Transaction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoData.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  ~Transaction() override;
  explicit constexpr Transaction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transaction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return new Transaction();
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transaction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transaction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoData.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromNameFieldNumber = 4,
    kToNameFieldNumber = 5,
    kDetailFieldNumber = 8,
    kIdFieldNumber = 1,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kFinishedFieldNumber = 6,
    kVolumeFieldNumber = 7,
    kTimestampFieldNumber = 9,
  };
  // string from_name = 4;
  void clear_from_name();
  const std::string& from_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_from_name();
  void set_allocated_from_name(std::string* from_name);
  private:
  const std::string& _internal_from_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_name(const std::string& value);
  std::string* _internal_mutable_from_name();
  public:

  // string to_name = 5;
  void clear_to_name();
  const std::string& to_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_to_name();
  void set_allocated_to_name(std::string* to_name);
  private:
  const std::string& _internal_to_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_name(const std::string& value);
  std::string* _internal_mutable_to_name();
  public:

  // string detail = 8;
  void clear_detail();
  const std::string& detail() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detail(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detail();
  PROTOBUF_MUST_USE_RESULT std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 from = 2;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::int32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 to = 3;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::int32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool finished = 6;
  void clear_finished();
  bool finished() const;
  void set_finished(bool value);
  private:
  bool _internal_finished() const;
  void _internal_set_finished(bool value);
  public:

  // double volume = 7;
  void clear_volume();
  double volume() const;
  void set_volume(double value);
  private:
  double _internal_volume() const;
  void _internal_set_volume(double value);
  public:

  // int64 timestamp = 9;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protoData.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_;
  bool finished_;
  double volume_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoData_2eproto;
};
// -------------------------------------------------------------------

class CartItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoData.CartItem) */ {
 public:
  inline CartItem() : CartItem(nullptr) {}
  ~CartItem() override;
  explicit constexpr CartItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CartItem(const CartItem& from);
  CartItem(CartItem&& from) noexcept
    : CartItem() {
    *this = ::std::move(from);
  }

  inline CartItem& operator=(const CartItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CartItem& operator=(CartItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CartItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CartItem* internal_default_instance() {
    return reinterpret_cast<const CartItem*>(
               &_CartItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CartItem& a, CartItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CartItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CartItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CartItem* New() const final {
    return new CartItem();
  }

  CartItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CartItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CartItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CartItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoData.CartItem";
  }
  protected:
  explicit CartItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kUserFieldNumber = 2,
    kGoodsFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 user = 2;
  void clear_user();
  ::PROTOBUF_NAMESPACE_ID::int32 user() const;
  void set_user(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user() const;
  void _internal_set_user(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goods = 3;
  void clear_goods();
  ::PROTOBUF_NAMESPACE_ID::int32 goods() const;
  void set_goods(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goods() const;
  void _internal_set_goods(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protoData.CartItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_;
  ::PROTOBUF_NAMESPACE_ID::int32 goods_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoData_2eproto;
};
// -------------------------------------------------------------------

class Cart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoData.Cart) */ {
 public:
  inline Cart() : Cart(nullptr) {}
  ~Cart() override;
  explicit constexpr Cart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cart(const Cart& from);
  Cart(Cart&& from) noexcept
    : Cart() {
    *this = ::std::move(from);
  }

  inline Cart& operator=(const Cart& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cart& operator=(Cart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Cart& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cart* internal_default_instance() {
    return reinterpret_cast<const Cart*>(
               &_Cart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Cart& a, Cart& b) {
    a.Swap(&b);
  }
  inline void Swap(Cart* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cart* New() const final {
    return new Cart();
  }

  Cart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Cart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Cart& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoData.Cart";
  }
  protected:
  explicit Cart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // repeated .protoData.CartItem item = 1;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::protoData::CartItem* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoData::CartItem >*
      mutable_item();
  private:
  const ::protoData::CartItem& _internal_item(int index) const;
  ::protoData::CartItem* _internal_add_item();
  public:
  const ::protoData::CartItem& item(int index) const;
  ::protoData::CartItem* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoData::CartItem >&
      item() const;

  // @@protoc_insertion_point(class_scope:protoData.Cart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoData::CartItem > item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoData_2eproto;
};
// -------------------------------------------------------------------

class Discount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoData.Discount) */ {
 public:
  inline Discount() : Discount(nullptr) {}
  ~Discount() override;
  explicit constexpr Discount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Discount(const Discount& from);
  Discount(Discount&& from) noexcept
    : Discount() {
    *this = ::std::move(from);
  }

  inline Discount& operator=(const Discount& from) {
    CopyFrom(from);
    return *this;
  }
  inline Discount& operator=(Discount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Discount& default_instance() {
    return *internal_default_instance();
  }
  static inline const Discount* internal_default_instance() {
    return reinterpret_cast<const Discount*>(
               &_Discount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Discount& a, Discount& b) {
    a.Swap(&b);
  }
  inline void Swap(Discount* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Discount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Discount* New() const final {
    return new Discount();
  }

  Discount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Discount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Discount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Discount& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Discount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoData.Discount";
  }
  protected:
  explicit Discount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDiscountFieldNumber = 4,
    kThresholdFieldNumber = 5,
    kOperandFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double discount = 4;
  void clear_discount();
  double discount() const;
  void set_discount(double value);
  private:
  double _internal_discount() const;
  void _internal_set_discount(double value);
  public:

  // double threshold = 5;
  void clear_threshold();
  double threshold() const;
  void set_threshold(double value);
  private:
  double _internal_threshold() const;
  void _internal_set_threshold(double value);
  public:

  // int32 operand = 3;
  void clear_operand();
  ::PROTOBUF_NAMESPACE_ID::int32 operand() const;
  void set_operand(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_operand() const;
  void _internal_set_operand(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protoData.Discount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  double discount_;
  double threshold_;
  ::PROTOBUF_NAMESPACE_ID::int32 operand_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoData_2eproto;
};
// -------------------------------------------------------------------

class DiscountArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoData.DiscountArray) */ {
 public:
  inline DiscountArray() : DiscountArray(nullptr) {}
  ~DiscountArray() override;
  explicit constexpr DiscountArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscountArray(const DiscountArray& from);
  DiscountArray(DiscountArray&& from) noexcept
    : DiscountArray() {
    *this = ::std::move(from);
  }

  inline DiscountArray& operator=(const DiscountArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscountArray& operator=(DiscountArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscountArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscountArray* internal_default_instance() {
    return reinterpret_cast<const DiscountArray*>(
               &_DiscountArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DiscountArray& a, DiscountArray& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscountArray* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscountArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscountArray* New() const final {
    return new DiscountArray();
  }

  DiscountArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscountArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscountArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DiscountArray& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscountArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoData.DiscountArray";
  }
  protected:
  explicit DiscountArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiscountFieldNumber = 1,
  };
  // repeated .protoData.Discount discount = 1;
  int discount_size() const;
  private:
  int _internal_discount_size() const;
  public:
  void clear_discount();
  ::protoData::Discount* mutable_discount(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoData::Discount >*
      mutable_discount();
  private:
  const ::protoData::Discount& _internal_discount(int index) const;
  ::protoData::Discount* _internal_add_discount();
  public:
  const ::protoData::Discount& discount(int index) const;
  ::protoData::Discount* add_discount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoData::Discount >&
      discount() const;

  // @@protoc_insertion_point(class_scope:protoData.DiscountArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoData::Discount > discount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protoData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GoodsArray

// repeated .protoData.Goods goods = 1;
inline int GoodsArray::_internal_goods_size() const {
  return goods_.size();
}
inline int GoodsArray::goods_size() const {
  return _internal_goods_size();
}
inline void GoodsArray::clear_goods() {
  goods_.Clear();
}
inline ::protoData::Goods* GoodsArray::mutable_goods(int index) {
  // @@protoc_insertion_point(field_mutable:protoData.GoodsArray.goods)
  return goods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoData::Goods >*
GoodsArray::mutable_goods() {
  // @@protoc_insertion_point(field_mutable_list:protoData.GoodsArray.goods)
  return &goods_;
}
inline const ::protoData::Goods& GoodsArray::_internal_goods(int index) const {
  return goods_.Get(index);
}
inline const ::protoData::Goods& GoodsArray::goods(int index) const {
  // @@protoc_insertion_point(field_get:protoData.GoodsArray.goods)
  return _internal_goods(index);
}
inline ::protoData::Goods* GoodsArray::_internal_add_goods() {
  return goods_.Add();
}
inline ::protoData::Goods* GoodsArray::add_goods() {
  ::protoData::Goods* _add = _internal_add_goods();
  // @@protoc_insertion_point(field_add:protoData.GoodsArray.goods)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoData::Goods >&
GoodsArray::goods() const {
  // @@protoc_insertion_point(field_list:protoData.GoodsArray.goods)
  return goods_;
}

// -------------------------------------------------------------------

// Goods

// string name = 1;
inline void Goods::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Goods::name() const {
  // @@protoc_insertion_point(field_get:protoData.Goods.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Goods::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoData.Goods.name)
}
inline std::string* Goods::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:protoData.Goods.name)
  return _s;
}
inline const std::string& Goods::_internal_name() const {
  return name_.Get();
}
inline void Goods::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Goods::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Goods::release_name() {
  // @@protoc_insertion_point(field_release:protoData.Goods.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Goods::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protoData.Goods.name)
}

// string description = 2;
inline void Goods::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Goods::description() const {
  // @@protoc_insertion_point(field_get:protoData.Goods.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Goods::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoData.Goods.description)
}
inline std::string* Goods::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:protoData.Goods.description)
  return _s;
}
inline const std::string& Goods::_internal_description() const {
  return description_.Get();
}
inline void Goods::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Goods::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Goods::release_description() {
  // @@protoc_insertion_point(field_release:protoData.Goods.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Goods::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protoData.Goods.description)
}

// double price = 3;
inline void Goods::clear_price() {
  price_ = 0;
}
inline double Goods::_internal_price() const {
  return price_;
}
inline double Goods::price() const {
  // @@protoc_insertion_point(field_get:protoData.Goods.price)
  return _internal_price();
}
inline void Goods::_internal_set_price(double value) {
  
  price_ = value;
}
inline void Goods::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:protoData.Goods.price)
}

// int32 seller = 4;
inline void Goods::clear_seller() {
  seller_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Goods::_internal_seller() const {
  return seller_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Goods::seller() const {
  // @@protoc_insertion_point(field_get:protoData.Goods.seller)
  return _internal_seller();
}
inline void Goods::_internal_set_seller(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seller_ = value;
}
inline void Goods::set_seller(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seller(value);
  // @@protoc_insertion_point(field_set:protoData.Goods.seller)
}

// int32 id = 5;
inline void Goods::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Goods::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Goods::id() const {
  // @@protoc_insertion_point(field_get:protoData.Goods.id)
  return _internal_id();
}
inline void Goods::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Goods::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protoData.Goods.id)
}

// int32 type = 6;
inline void Goods::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Goods::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Goods::type() const {
  // @@protoc_insertion_point(field_get:protoData.Goods.type)
  return _internal_type();
}
inline void Goods::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Goods::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protoData.Goods.type)
}

// int32 remain = 7;
inline void Goods::clear_remain() {
  remain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Goods::_internal_remain() const {
  return remain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Goods::remain() const {
  // @@protoc_insertion_point(field_get:protoData.Goods.remain)
  return _internal_remain();
}
inline void Goods::_internal_set_remain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remain_ = value;
}
inline void Goods::set_remain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remain(value);
  // @@protoc_insertion_point(field_set:protoData.Goods.remain)
}

// -------------------------------------------------------------------

// User

// int32 id = 1;
inline void User::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::id() const {
  // @@protoc_insertion_point(field_get:protoData.User.id)
  return _internal_id();
}
inline void User::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void User::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protoData.User.id)
}

// string username = 2;
inline void User::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& User::username() const {
  // @@protoc_insertion_point(field_get:protoData.User.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoData.User.username)
}
inline std::string* User::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:protoData.User.username)
  return _s;
}
inline const std::string& User::_internal_username() const {
  return username_.Get();
}
inline void User::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* User::release_username() {
  // @@protoc_insertion_point(field_release:protoData.User.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void User::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protoData.User.username)
}

// string password = 3;
inline void User::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& User::password() const {
  // @@protoc_insertion_point(field_get:protoData.User.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoData.User.password)
}
inline std::string* User::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:protoData.User.password)
  return _s;
}
inline const std::string& User::_internal_password() const {
  return password_.Get();
}
inline void User::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* User::release_password() {
  // @@protoc_insertion_point(field_release:protoData.User.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void User::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protoData.User.password)
}

// double balance = 4;
inline void User::clear_balance() {
  balance_ = 0;
}
inline double User::_internal_balance() const {
  return balance_;
}
inline double User::balance() const {
  // @@protoc_insertion_point(field_get:protoData.User.balance)
  return _internal_balance();
}
inline void User::_internal_set_balance(double value) {
  
  balance_ = value;
}
inline void User::set_balance(double value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:protoData.User.balance)
}

// int32 type = 5;
inline void User::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::type() const {
  // @@protoc_insertion_point(field_get:protoData.User.type)
  return _internal_type();
}
inline void User::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void User::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protoData.User.type)
}

// -------------------------------------------------------------------

// UserForm

// string username = 1;
inline void UserForm::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& UserForm::username() const {
  // @@protoc_insertion_point(field_get:protoData.UserForm.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserForm::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoData.UserForm.username)
}
inline std::string* UserForm::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:protoData.UserForm.username)
  return _s;
}
inline const std::string& UserForm::_internal_username() const {
  return username_.Get();
}
inline void UserForm::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserForm::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserForm::release_username() {
  // @@protoc_insertion_point(field_release:protoData.UserForm.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserForm::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protoData.UserForm.username)
}

// string password = 2;
inline void UserForm::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& UserForm::password() const {
  // @@protoc_insertion_point(field_get:protoData.UserForm.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserForm::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoData.UserForm.password)
}
inline std::string* UserForm::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:protoData.UserForm.password)
  return _s;
}
inline const std::string& UserForm::_internal_password() const {
  return password_.Get();
}
inline void UserForm::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserForm::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserForm::release_password() {
  // @@protoc_insertion_point(field_release:protoData.UserForm.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserForm::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protoData.UserForm.password)
}

// int32 type = 3;
inline void UserForm::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserForm::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserForm::type() const {
  // @@protoc_insertion_point(field_get:protoData.UserForm.type)
  return _internal_type();
}
inline void UserForm::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void UserForm::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protoData.UserForm.type)
}

// -------------------------------------------------------------------

// TransactionArray

// repeated .protoData.Transaction transaction = 1;
inline int TransactionArray::_internal_transaction_size() const {
  return transaction_.size();
}
inline int TransactionArray::transaction_size() const {
  return _internal_transaction_size();
}
inline void TransactionArray::clear_transaction() {
  transaction_.Clear();
}
inline ::protoData::Transaction* TransactionArray::mutable_transaction(int index) {
  // @@protoc_insertion_point(field_mutable:protoData.TransactionArray.transaction)
  return transaction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoData::Transaction >*
TransactionArray::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable_list:protoData.TransactionArray.transaction)
  return &transaction_;
}
inline const ::protoData::Transaction& TransactionArray::_internal_transaction(int index) const {
  return transaction_.Get(index);
}
inline const ::protoData::Transaction& TransactionArray::transaction(int index) const {
  // @@protoc_insertion_point(field_get:protoData.TransactionArray.transaction)
  return _internal_transaction(index);
}
inline ::protoData::Transaction* TransactionArray::_internal_add_transaction() {
  return transaction_.Add();
}
inline ::protoData::Transaction* TransactionArray::add_transaction() {
  ::protoData::Transaction* _add = _internal_add_transaction();
  // @@protoc_insertion_point(field_add:protoData.TransactionArray.transaction)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoData::Transaction >&
TransactionArray::transaction() const {
  // @@protoc_insertion_point(field_list:protoData.TransactionArray.transaction)
  return transaction_;
}

// -------------------------------------------------------------------

// Transaction

// int32 id = 1;
inline void Transaction::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::id() const {
  // @@protoc_insertion_point(field_get:protoData.Transaction.id)
  return _internal_id();
}
inline void Transaction::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Transaction::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protoData.Transaction.id)
}

// int32 from = 2;
inline void Transaction::clear_from() {
  from_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::from() const {
  // @@protoc_insertion_point(field_get:protoData.Transaction.from)
  return _internal_from();
}
inline void Transaction::_internal_set_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  from_ = value;
}
inline void Transaction::set_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:protoData.Transaction.from)
}

// int32 to = 3;
inline void Transaction::clear_to() {
  to_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::to() const {
  // @@protoc_insertion_point(field_get:protoData.Transaction.to)
  return _internal_to();
}
inline void Transaction::_internal_set_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  to_ = value;
}
inline void Transaction::set_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:protoData.Transaction.to)
}

// string from_name = 4;
inline void Transaction::clear_from_name() {
  from_name_.ClearToEmpty();
}
inline const std::string& Transaction::from_name() const {
  // @@protoc_insertion_point(field_get:protoData.Transaction.from_name)
  return _internal_from_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction::set_from_name(ArgT0&& arg0, ArgT... args) {
 
 from_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoData.Transaction.from_name)
}
inline std::string* Transaction::mutable_from_name() {
  std::string* _s = _internal_mutable_from_name();
  // @@protoc_insertion_point(field_mutable:protoData.Transaction.from_name)
  return _s;
}
inline const std::string& Transaction::_internal_from_name() const {
  return from_name_.Get();
}
inline void Transaction::_internal_set_from_name(const std::string& value) {
  
  from_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction::_internal_mutable_from_name() {
  
  return from_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction::release_from_name() {
  // @@protoc_insertion_point(field_release:protoData.Transaction.from_name)
  return from_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction::set_allocated_from_name(std::string* from_name) {
  if (from_name != nullptr) {
    
  } else {
    
  }
  from_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protoData.Transaction.from_name)
}

// string to_name = 5;
inline void Transaction::clear_to_name() {
  to_name_.ClearToEmpty();
}
inline const std::string& Transaction::to_name() const {
  // @@protoc_insertion_point(field_get:protoData.Transaction.to_name)
  return _internal_to_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction::set_to_name(ArgT0&& arg0, ArgT... args) {
 
 to_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoData.Transaction.to_name)
}
inline std::string* Transaction::mutable_to_name() {
  std::string* _s = _internal_mutable_to_name();
  // @@protoc_insertion_point(field_mutable:protoData.Transaction.to_name)
  return _s;
}
inline const std::string& Transaction::_internal_to_name() const {
  return to_name_.Get();
}
inline void Transaction::_internal_set_to_name(const std::string& value) {
  
  to_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction::_internal_mutable_to_name() {
  
  return to_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction::release_to_name() {
  // @@protoc_insertion_point(field_release:protoData.Transaction.to_name)
  return to_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction::set_allocated_to_name(std::string* to_name) {
  if (to_name != nullptr) {
    
  } else {
    
  }
  to_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protoData.Transaction.to_name)
}

// bool finished = 6;
inline void Transaction::clear_finished() {
  finished_ = false;
}
inline bool Transaction::_internal_finished() const {
  return finished_;
}
inline bool Transaction::finished() const {
  // @@protoc_insertion_point(field_get:protoData.Transaction.finished)
  return _internal_finished();
}
inline void Transaction::_internal_set_finished(bool value) {
  
  finished_ = value;
}
inline void Transaction::set_finished(bool value) {
  _internal_set_finished(value);
  // @@protoc_insertion_point(field_set:protoData.Transaction.finished)
}

// double volume = 7;
inline void Transaction::clear_volume() {
  volume_ = 0;
}
inline double Transaction::_internal_volume() const {
  return volume_;
}
inline double Transaction::volume() const {
  // @@protoc_insertion_point(field_get:protoData.Transaction.volume)
  return _internal_volume();
}
inline void Transaction::_internal_set_volume(double value) {
  
  volume_ = value;
}
inline void Transaction::set_volume(double value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:protoData.Transaction.volume)
}

// string detail = 8;
inline void Transaction::clear_detail() {
  detail_.ClearToEmpty();
}
inline const std::string& Transaction::detail() const {
  // @@protoc_insertion_point(field_get:protoData.Transaction.detail)
  return _internal_detail();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transaction::set_detail(ArgT0&& arg0, ArgT... args) {
 
 detail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoData.Transaction.detail)
}
inline std::string* Transaction::mutable_detail() {
  std::string* _s = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:protoData.Transaction.detail)
  return _s;
}
inline const std::string& Transaction::_internal_detail() const {
  return detail_.Get();
}
inline void Transaction::_internal_set_detail(const std::string& value) {
  
  detail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Transaction::_internal_mutable_detail() {
  
  return detail_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Transaction::release_detail() {
  // @@protoc_insertion_point(field_release:protoData.Transaction.detail)
  return detail_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Transaction::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    
  } else {
    
  }
  detail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detail,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:protoData.Transaction.detail)
}

// int64 timestamp = 9;
inline void Transaction::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction::timestamp() const {
  // @@protoc_insertion_point(field_get:protoData.Transaction.timestamp)
  return _internal_timestamp();
}
inline void Transaction::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void Transaction::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:protoData.Transaction.timestamp)
}

// -------------------------------------------------------------------

// CartItem

// int32 id = 1;
inline void CartItem::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CartItem::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CartItem::id() const {
  // @@protoc_insertion_point(field_get:protoData.CartItem.id)
  return _internal_id();
}
inline void CartItem::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CartItem::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protoData.CartItem.id)
}

// int32 user = 2;
inline void CartItem::clear_user() {
  user_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CartItem::_internal_user() const {
  return user_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CartItem::user() const {
  // @@protoc_insertion_point(field_get:protoData.CartItem.user)
  return _internal_user();
}
inline void CartItem::_internal_set_user(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_ = value;
}
inline void CartItem::set_user(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:protoData.CartItem.user)
}

// int32 goods = 3;
inline void CartItem::clear_goods() {
  goods_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CartItem::_internal_goods() const {
  return goods_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CartItem::goods() const {
  // @@protoc_insertion_point(field_get:protoData.CartItem.goods)
  return _internal_goods();
}
inline void CartItem::_internal_set_goods(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goods_ = value;
}
inline void CartItem::set_goods(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goods(value);
  // @@protoc_insertion_point(field_set:protoData.CartItem.goods)
}

// int32 count = 4;
inline void CartItem::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CartItem::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CartItem::count() const {
  // @@protoc_insertion_point(field_get:protoData.CartItem.count)
  return _internal_count();
}
inline void CartItem::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void CartItem::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:protoData.CartItem.count)
}

// -------------------------------------------------------------------

// Cart

// repeated .protoData.CartItem item = 1;
inline int Cart::_internal_item_size() const {
  return item_.size();
}
inline int Cart::item_size() const {
  return _internal_item_size();
}
inline void Cart::clear_item() {
  item_.Clear();
}
inline ::protoData::CartItem* Cart::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:protoData.Cart.item)
  return item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoData::CartItem >*
Cart::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:protoData.Cart.item)
  return &item_;
}
inline const ::protoData::CartItem& Cart::_internal_item(int index) const {
  return item_.Get(index);
}
inline const ::protoData::CartItem& Cart::item(int index) const {
  // @@protoc_insertion_point(field_get:protoData.Cart.item)
  return _internal_item(index);
}
inline ::protoData::CartItem* Cart::_internal_add_item() {
  return item_.Add();
}
inline ::protoData::CartItem* Cart::add_item() {
  ::protoData::CartItem* _add = _internal_add_item();
  // @@protoc_insertion_point(field_add:protoData.Cart.item)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoData::CartItem >&
Cart::item() const {
  // @@protoc_insertion_point(field_list:protoData.Cart.item)
  return item_;
}

// -------------------------------------------------------------------

// Discount

// int32 id = 1;
inline void Discount::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Discount::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Discount::id() const {
  // @@protoc_insertion_point(field_get:protoData.Discount.id)
  return _internal_id();
}
inline void Discount::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Discount::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protoData.Discount.id)
}

// int32 type = 2;
inline void Discount::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Discount::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Discount::type() const {
  // @@protoc_insertion_point(field_get:protoData.Discount.type)
  return _internal_type();
}
inline void Discount::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Discount::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protoData.Discount.type)
}

// int32 operand = 3;
inline void Discount::clear_operand() {
  operand_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Discount::_internal_operand() const {
  return operand_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Discount::operand() const {
  // @@protoc_insertion_point(field_get:protoData.Discount.operand)
  return _internal_operand();
}
inline void Discount::_internal_set_operand(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  operand_ = value;
}
inline void Discount::set_operand(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_operand(value);
  // @@protoc_insertion_point(field_set:protoData.Discount.operand)
}

// double discount = 4;
inline void Discount::clear_discount() {
  discount_ = 0;
}
inline double Discount::_internal_discount() const {
  return discount_;
}
inline double Discount::discount() const {
  // @@protoc_insertion_point(field_get:protoData.Discount.discount)
  return _internal_discount();
}
inline void Discount::_internal_set_discount(double value) {
  
  discount_ = value;
}
inline void Discount::set_discount(double value) {
  _internal_set_discount(value);
  // @@protoc_insertion_point(field_set:protoData.Discount.discount)
}

// double threshold = 5;
inline void Discount::clear_threshold() {
  threshold_ = 0;
}
inline double Discount::_internal_threshold() const {
  return threshold_;
}
inline double Discount::threshold() const {
  // @@protoc_insertion_point(field_get:protoData.Discount.threshold)
  return _internal_threshold();
}
inline void Discount::_internal_set_threshold(double value) {
  
  threshold_ = value;
}
inline void Discount::set_threshold(double value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:protoData.Discount.threshold)
}

// -------------------------------------------------------------------

// DiscountArray

// repeated .protoData.Discount discount = 1;
inline int DiscountArray::_internal_discount_size() const {
  return discount_.size();
}
inline int DiscountArray::discount_size() const {
  return _internal_discount_size();
}
inline void DiscountArray::clear_discount() {
  discount_.Clear();
}
inline ::protoData::Discount* DiscountArray::mutable_discount(int index) {
  // @@protoc_insertion_point(field_mutable:protoData.DiscountArray.discount)
  return discount_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoData::Discount >*
DiscountArray::mutable_discount() {
  // @@protoc_insertion_point(field_mutable_list:protoData.DiscountArray.discount)
  return &discount_;
}
inline const ::protoData::Discount& DiscountArray::_internal_discount(int index) const {
  return discount_.Get(index);
}
inline const ::protoData::Discount& DiscountArray::discount(int index) const {
  // @@protoc_insertion_point(field_get:protoData.DiscountArray.discount)
  return _internal_discount(index);
}
inline ::protoData::Discount* DiscountArray::_internal_add_discount() {
  return discount_.Add();
}
inline ::protoData::Discount* DiscountArray::add_discount() {
  ::protoData::Discount* _add = _internal_add_discount();
  // @@protoc_insertion_point(field_add:protoData.DiscountArray.discount)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoData::Discount >&
DiscountArray::discount() const {
  // @@protoc_insertion_point(field_list:protoData.DiscountArray.discount)
  return discount_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protoData

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protoData_2eproto
